# ============================================================
# PIPELINE CI - Proyecto Flask (Sistema de Pel√≠culas)
# ============================================================

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  artifactName: 'build_artifact'

steps:
# ============================================================
# 1Ô∏è‚É£ Verificar directorio actual y contenido
# ============================================================
- script: |
    echo "üìÅ Directorio actual:"
    pwd
    echo "üìÇ Archivos y carpetas disponibles:"
    ls -la
  displayName: 'Verificar contenido del directorio'

# ============================================================
# 2Ô∏è‚É£ Usar Python 3.10
# ============================================================
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
  displayName: 'Usar Python 3.10'

# ============================================================
# 3Ô∏è‚É£ Instalar dependencias del sistema
# ============================================================
- script: |
    sudo apt-get update -y
    sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
  displayName: 'Instalar dependencias del sistema'

# ============================================================
# 4Ô∏è‚É£ Instalar dependencias Python (Flask)
# ============================================================
- script: |
    echo "üì¶ Instalando dependencias del proyecto Flask..."
    python -m pip install --upgrade pip setuptools wheel
    # ==========================================
    # üîß IMPORTANTE: CAMBIA ESTA RUTA SI TU ARCHIVO EST√Å EN UNA CARPETA
    # Si tu requirements.txt est√° en la ra√≠z -> deja como est√°
    # Si est√° dentro de 'peliculas/' c√°mbialo a: pip install -r peliculas/requirements.txt
    # ==========================================
    if [ -f requirements.txt ]; then
        pip install -r requirements.txt
    elif [ -f peliculas/requirements.txt ]; then
        pip install -r peliculas/requirements.txt
    elif [ -f backend/requirements.txt ]; then
        pip install -r backend/requirements.txt
    else
        echo "‚ö† No se encontr√≥ requirements.txt en las rutas conocidas."
        exit 1
    fi
  displayName: 'Instalar dependencias Python'

# ============================================================
# 5Ô∏è‚É£ Levantar la app Flask en background usando SQLite
# ============================================================
- script: |
    echo "üöÄ Iniciando API Flask con base de datos SQLite..."
    export DATABASE_URL="sqlite:///test.db"
    python -u app.py > app_stdout.log 2> app_stderr.log &
    echo $! > app.pid
    sleep 5
    echo "‚úÖ Flask deber√≠a estar corriendo ahora."
  displayName: 'Levantar Flask (modo prueba)'

# ============================================================
# 6Ô∏è‚É£ Ejecutar pruebas autom√°ticas
# ============================================================
- script: |
    echo "üß™ Ejecutando pruebas de API (Test_api.py)..."
    python Test_api.py || echo "‚ö† Algunos tests fallaron."
  displayName: 'Ejecutar Test_api.py'

# ============================================================
# 7Ô∏è‚É£ Detener Flask
# ============================================================
- script: |
    if [ -f app.pid ]; then
      echo "üõë Deteniendo Flask..."
      kill $(cat app.pid)
      rm -f app.pid
    else
      echo "‚ö† No se encontr√≥ app.pid"
    fi
  displayName: 'Detener aplicaci√≥n Flask'

# ============================================================
# 8Ô∏è‚É£ Empaquetar proyecto en ZIP
# ============================================================
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '.'
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
    replaceExistingArchive: true
  displayName: 'Empaquetar proyecto en ZIP'

# ============================================================
# 9Ô∏è‚É£ Publicar artifact (ZIP)
# ============================================================
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
  displayName: 'Publicar artifact'