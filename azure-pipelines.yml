# ============================================================
# PIPELINE CI/CD - Proyecto Flask (ProjectoAPIREST)
# ============================================================

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  projectFolder: 'ProjectoAPIREST'    # üëà nombre exacto de tu carpeta
  artifactName: 'build_artifact'

steps:
# ============================================================
# 1Ô∏è‚É£ Verificar estructura del repositorio
# ============================================================
- script: |
    echo "üìÅ Directorio actual:"
    pwd
    echo "üìÇ Contenido del repositorio:"
    ls -la
  displayName: 'Verificar contenido ra√≠z del repo'

# ============================================================
# 2Ô∏è‚É£ Configurar Python 3.10
# ============================================================
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
  displayName: 'Usar Python 3.10'

# ============================================================
# 3Ô∏è‚É£ Instalar dependencias del sistema
# ============================================================
- script: |
    sudo apt-get update -y
    sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
  displayName: 'Instalar dependencias del sistema'

# ============================================================
# 4Ô∏è‚É£ Instalar dependencias del proyecto Flask
# ============================================================
- script: |
    echo "üì¶ Entrando en carpeta del proyecto: $(projectFolder)"
    cd $(projectFolder)
    echo "üìÇ Archivos dentro de la carpeta:"
    ls -la
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
  displayName: 'Instalar dependencias Python'

# ============================================================
# 5Ô∏è‚É£ Levantar API Flask con SQLite (en background)
# ============================================================
- script: |
    cd $(projectFolder)
    echo "üöÄ Iniciando API Flask (modo prueba con SQLite)..."
    export DATABASE_URL="sqlite:///test.db"
    python -u app.py > ../app_stdout.log 2> ../app_stderr.log &
    echo $! > ../app.pid
    echo "‚è≥ Esperando 10 segundos para que la API se inicialice..."
    sleep 10
    echo "üîé Verificando si el puerto 5000 est√° activo..."
    ss -lntp | grep :5000 || echo "‚ö† El puerto 5000 no parece estar escuchando todav√≠a."
  displayName: 'Levantar Flask en background con espera'

# ============================================================
# 6Ô∏è‚É£ Ejecutar pruebas autom√°ticas de la API
# ============================================================
- script: |
    cd $(projectFolder)
    echo "üß™ Ejecutando pruebas autom√°ticas (Test_api.py)..."
    python Test_api.py || echo "‚ö† Algunas pruebas fallaron."
    echo "üìÑ Logs de Flask (stdout):"
    cat ../app_stdout.log || true
    echo "üìÑ Logs de Flask (stderr):"
    cat ../app_stderr.log || true
  displayName: 'Ejecutar Test_api.py con logs'

# ============================================================
# 7Ô∏è‚É£ Detener la aplicaci√≥n Flask
# ============================================================
- script: |
    if [ -f app.pid ]; then
      echo "üõë Deteniendo Flask..."
      kill $(cat app.pid)
      rm -f app.pid
    else
      echo "‚ö† No se encontr√≥ app.pid"
    fi
  displayName: 'Detener aplicaci√≥n Flask'

# ============================================================
# 8Ô∏è‚É£ Empaquetar el proyecto en ZIP
# ============================================================
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/$(projectFolder)'
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
    replaceExistingArchive: true
  displayName: 'Empaquetar proyecto en ZIP'

# ============================================================
# 9Ô∏è‚É£ Publicar artifact ZIP
# ============================================================
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
  displayName: 'Publicar artifact'